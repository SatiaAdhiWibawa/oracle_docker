CREATE TABLE employeesv1 (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY,  -- AUTO_INCREMENT equivalent
    id_card VARCHAR2(50) NOT NULL,
    name VARCHAR2(255) NOT NULL,
    position VARCHAR2(50) NOT NULL,
    address VARCHAR2(255) NOT NULL,
    email VARCHAR2(50) NOT NULL,
    phone_number VARCHAR2(20) NOT NULL,
    CONSTRAINT employees_pk PRIMARY KEY (id)
);

-- INSERT data
INSERT INTO employeesv1 (id_card, name, position, address, email, phone_number) VALUES ('123456789', 'John Doe', 'Software Engineer', '123 Elm St', 'john@gmail.com', '123-456-7890');
INSERT INTO employeesv1 (id_card, name, position, address, email, phone_number) VALUES ('987654321', 'Jane Smith', 'Project Manager', '456 Oak St', 'jane@gmail.com', '987-654-3210');
INSERT INTO employeesv1 (id_card, name, position, address, email, phone_number) VALUES ('456789123', 'Alice Johnson', 'Data Analyst', '789 Maple St', 'alice@gmail.com', '456-789-1230');




CREATE OR REPLACE PROCEDURE manage_employeesv1 (
    p_operation      IN VARCHAR2,        -- Operation type: INSERT, UPDATE, DELETE, LIST, DETAIL
    p_id             IN NUMBER DEFAULT NULL,  -- ID for UPDATE, DELETE, DETAIL
    p_id_card        IN VARCHAR2 DEFAULT NULL,
    p_name           IN VARCHAR2 DEFAULT NULL,
    p_position       IN VARCHAR2 DEFAULT NULL,
    p_address        IN VARCHAR2 DEFAULT NULL,
    p_email          IN VARCHAR2 DEFAULT NULL,
    p_phone_number   IN VARCHAR2 DEFAULT NULL,

    p_result         OUT SYS_REFCURSOR
)
AS
BEGIN
    -- Operation INSERT
    IF p_operation = 'INSERT' THEN
        INSERT INTO employees (id_card, name, position, address, email, phone_number)
        VALUES (p_id_card, p_name, p_position, p_address, p_email, p_phone_number);

    -- Operation UPDATE
    ELSIF p_operation = 'UPDATE' THEN
        UPDATE employees
        SET id_card = NVL(p_id_card, id_card),
            name = NVL(p_name, name),
            position = NVL(p_position, position),
            address = NVL(p_address, address),
            email = NVL(p_email, email),
            phone_number = NVL(p_phone_number, phone_number)
        WHERE id = p_id;

    -- Operation DELETE
    ELSIF p_operation = 'DELETE' THEN
        DELETE FROM employees WHERE id = p_id;

    -- Operation LIST (select all)
    ELSIF p_operation = 'LIST' THEN
        OPEN p_result FOR
        SELECT * FROM employees;

    -- Operation DETAIL (select by ID)
    ELSIF p_operation = 'DETAIL' THEN
        OPEN p_result FOR
        SELECT * FROM employees WHERE id = p_id;
    END IF;
END;
/
